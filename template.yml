AWSTemplateFormatVersion : '2010-09-09'
Description: CDFA DCSS serverless application.
Parameters:
  Environment:
    Type: String
  HashKey:
    Type: String
  AwsUsGov:
    Type: String

Resources:

###################################### LAMBDA FUNCTIONS ################################################################

  #DELINQUENCY IMPORT

  DelinquencyImportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub dcss-${Environment}-delinquency-import-func
      Handler: src/import/delinquency-import.handler
      Runtime: nodejs6.10
      Code: ./
      Role: !GetAtt DelinquencyImportFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DcssTable
          KEY_ALIAS: !Sub alias/dcss-${Environment}-key
          HASH_KEY: !Sub ${HashKey}

  DelinquencyImportFunctionS3Permission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt DelinquencyImportFunction.Arn
        Principal: s3.amazonaws.com
        SourceAccount: !Ref AWS::AccountId
        SourceArn: !Sub arn:aws:s3:::dcss-${Environment}-delinquency-import-bucket

  #STATUS

  StatusAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub dcss-${Environment}-status-func
      Handler: src/api/status.handler
      Runtime: nodejs6.10
      Code: ./
      Role: !GetAtt StatusAPIFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DcssTable
          HASH_KEY: !Sub ${HashKey}

  StatusAPIFunctionGatewayPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt StatusAPIFunction.Arn
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub arn:${AwsUsGov}:execute-api:${AWS::Region}:${AWS::AccountId}:${StatusAPI}/*

  #ACTION TAKEN

  ActionTakenFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub dcss-${Environment}-action-taken-func
      Handler: src/api/action-taken.handler
      Runtime: nodejs6.10
      Code: ./
      Role: !GetAtt ActionTakenFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DcssTable
          ACTION_TABLE_NAME: !Ref ActionTakenTable
          HASH_KEY: !Sub ${HashKey}
          KEY_ALIAS: !Sub alias/dcss-${Environment}-key

  ActionTakenExportFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt ActionTakenFunction.Arn
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub arn:${AwsUsGov}:execute-api:${AWS::Region}:${AWS::AccountId}:${ActionTakenAPI}/*


  #ACTION TAKEN EXPORT

  ActionTakenExportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub dcss-${Environment}-action-taken-export-func
      Handler: src/export/action-taken-export.handler
      Runtime: nodejs6.10
      Code: ./
      Role: !GetAtt ActionTakenExportFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DcssTable
          ACTION_TABLE_NAME: !Ref ActionTakenTable
          HASH_KEY: !Sub ${HashKey}
          KEY_ALIAS: !Sub alias/dcss-${Environment}-key

  ActionTakenFunctionGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ActionTakenExportFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ActionTakenExportRule.Arn

  ActionTakenExportRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'cron(0 9 * * ? *)' #9AM UTC everyday = 1AM Pacific time
      Targets:
        -
          Id: ActionTakenExportScheduler
          Arn: !GetAtt ActionTakenExportFunction.Arn


###################################### API GATEWAY #####################################################################

  #STATUS

  StatusAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub dcss-${Environment}-status-api
      Description: "API used to return participant status"
      EndpointConfiguration:
        Types:
          - REGIONAL

  StatusAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref StatusAPIDeployment
      RestApiId: !Ref StatusAPI
      StageName: !Sub ${Environment}

  StatusAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: StatusAPIRequest
    Properties:
      RestApiId: !Ref StatusAPI

  StatusAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref StatusAPI
      ParentId: !GetAtt StatusAPI.RootResourceId
      PathPart: status

  StatusAPIRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RestApiId: !Ref StatusAPI
      ResourceId: !Ref StatusAPIResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:${AwsUsGov}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StatusAPIFunction.Arn}/invocations

  #ACTION TAKEN

  ActionTakenAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub dcss-${Environment}-action-taken-api
      Description: "API used to post license action taken"
      EndpointConfiguration:
        Types:
          - REGIONAL

  ActionTakenAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ActionTakenAPIDeployment
      RestApiId: !Ref ActionTakenAPI
      StageName: !Sub ${Environment}

  ActionTakenAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ActionTakenAPIRequest
    Properties:
      RestApiId: !Ref ActionTakenAPI

  ActionTakenAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ActionTakenAPI
      ParentId: !GetAtt ActionTakenAPI.RootResourceId
      PathPart: action-taken

  ActionTakenAPIRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RestApiId: !Ref ActionTakenAPI
      ResourceId: !Ref ActionTakenAPIResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:${AwsUsGov}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ActionTakenFunction.Arn}/invocations

###################################### DYNAMODB ########################################################################

  #DCSS TABLE

  DcssTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Sub dcss-${Environment}-dcss-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: ssnHash
            AttributeType: S
          - AttributeName: stateIdHash
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: !Sub ssnHash-index
            KeySchema:
              -
                AttributeName: ssnHash
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          -
            IndexName: !Sub stateIdHash-index
            KeySchema:
              -
                AttributeName: stateIdHash
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  #ACTION TAKEN
  ActionTakenTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: !Sub dcss-${Environment}-action-taken-table
          AttributeDefinitions:
            - AttributeName: agencyCustomerId
              AttributeType: S
            - AttributeName: timestamp
              AttributeType: S
            - AttributeName: actionTakenDate
              AttributeType: S
            - AttributeName: actionTakenMonthYear
              AttributeType: S
          KeySchema:
            - AttributeName: agencyCustomerId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          GlobalSecondaryIndexes:
            -
              IndexName: !Sub actionTakenDate-index
              KeySchema:
                -
                  AttributeName: actionTakenDate
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
              ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
            -
              IndexName: !Sub actionTakenMonthYear-index
              KeySchema:
                -
                  AttributeName: actionTakenMonthYear
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
              ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

###################################### S3 BUCKETS AND EVENTS ###########################################################

  DelinquencyImportBucket:
      Type: AWS::S3::Bucket
      DependsOn: DelinquencyImportFunctionS3Permission
      Properties:
        BucketName:  !Sub dcss-${Environment}-delinquency-import-bucket
        NotificationConfiguration:
              LambdaConfigurations:
                -
                  Function: !GetAtt DelinquencyImportFunction.Arn
                  Event: "s3:ObjectCreated:*"

###################################### ROLES AND POLICIES ##############################################################

  DelinquencyImportFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub dcss-${Environment}-delinquency-import-func-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-lambda-logs-policy
          - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-${Environment}-s3-read-policy
          - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-${Environment}-s3-delete-policy
          - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-${Environment}-dynamo-update-policy

  StatusAPIFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub dcss-${Environment}-status-api-func-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-lambda-logs-policy
          - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-${Environment}-dynamo-read-policy

  ActionTakenFunctionRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: !Sub dcss-${Environment}-action-taken-func-role
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - sts:AssumeRole
          ManagedPolicyArns:
            - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-lambda-logs-policy
            - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-${Environment}-dynamo-update-policy

  ActionTakenExportFunctionRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: !Sub dcss-${Environment}-action-taken-export-func-role
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - sts:AssumeRole
          ManagedPolicyArns:
            - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-lambda-logs-policy
            - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-${Environment}-dynamo-read-policy
            - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-${Environment}-s3-read-policy
            - !Sub arn:${AwsUsGov}:iam::${AWS::AccountId}:policy/dcss-${Environment}-s3-put-policy

